# projects section data
# If you don't have language feature(language.yml is empty), ignore "i18n" items
# Suggest projects' img be located at '/static/assets/img/landing', and edit following img items.

#- name: Python
##  i18n: cpython
#  gh_user: python
#  repo: cpython
#  img: /static/assets/img/landing/python.png
#  desc: This project is other's project. I use another request to get repo's information.

- name: CC Screener
#  i18n: google
  url: https://github.com/mahuebel/ccscreener-android
  img: /static/assets/img/landing/ccscreener.png
  desc: <div class="textplanation">The biggest challenge on the Meteor project was understanding the stock market and its terminology enough to calculate potential profits, implied volatilities, and probabilities of each stock reaching or maintaining a value at various price points and call dates.  <br/>On the Android side, I got experience in retrieving data from my Meteor backend over DDP, as opposed to HTTP. <br/><br/><b>Meteor, ReactJS, DDP, HTML, Javascript, ES6, Less, Node, npm, MomentJS, Material-UI, MongoDB, Cordova, Android, Java, XML, Gradle, Android Studio, MVP, JDK 8</b></div>

- name: Pdelta Engineering
#  i18n: google
  url: http://www.pdelta.net/
  img: /static/assets/img/landing/pdelta.png
  desc: <div class="textplanation">P-delta was looking for a system to manage and track their projects, but didn't have a workflow conducive to systemization. I met with ownership multiple times during the process, going over ideas for a new workflow system that would eventually become the app. When we were finished, the app was able to track in what stage a project was while also dramatically cutting down the amount of data input with which they were originally consumed.  <br/><br/><b>Meteor, DDP, HTML, Javascript, jQuery, SCSS, Node, npm, MomentJS, Bootstrap, Blaze, Spacebars, MongoDB</b></div>

- name: Easter Now - Android
#  i18n: google
  url: http://easternow.com/
  img: /static/assets/img/landing/easternow.png
  desc: <div class="textplanation">Available on the Play Store, EasterNow was an opportunity for me to code in tandem with a developer working on an iOS app at the same time. It was a great look into the challenge and complexity that arises when working in multiple teams on the same base product. I was also able to tackle challenges such as managing Realm objects across multiple threads and user testing on a wide variety of phones and Android versions. <br/><br/><b>Android, Java, XML, Android Studio, Gradle, Realm, MixPanel, Crashlytics, Push Notifications</b></div>

- name: Wrapapp
#  i18n: google
#  url: https://wrapapp.herokuapp.com/
  img: /static/assets/img/landing/w_logo.png
  desc: <div class="textplanation">My previous company, WrapTX, needed a better way to track projects and manage client  interactions - wholesale and retail. To that end, I started development on a Meteor application. The app handles CRM, Project Management, Estimates and Invoicing, and Calendar scheduling by task category. To handle staff/broker/client complexity, I sought out and implemented a Meteor-specific account roles library to make sure data displayed accurately for each role. <br/><br/><b>Meteor, DDP, HTML, Javascript, jQuery, SCSS, Node, npm, MomentJS, FullCalendar, Xero API, Materialize, Blaze, Spacebars, MongoDB, Cordova, Push Notifications</b></div>

- name: Serv-Now
#  i18n: google
  url: https://serv-now.herokuapp.com
  img: /static/assets/img/landing/servnow.svg
  desc: <div class="textplanation">Serv-Now is a Meteor rewrite of - and expansion on - an Android app I had created previously. This app's challenges include the need for it to be easily configurable for each company that uses it, GPS fleet tracking, payroll management, and equipment tracking.  <br/><br/><b>Meteor, ReactJS, DDP, HTML, Javascript, ES6, Less, Node, npm, MomentJS, Material-UI, MongoDB, Cordova</b></div>

- name: Gather
#  i18n: google
  url: https://gather-meteor.herokuapp.com/
  img: /static/assets/img/landing/gather_logo.svg
  desc: <div class="textplanation">As Meteor and its community matured, it became clear that React would become the community-preferred front end library. To learn React, I decided to recreate one of my first few Android apps in Meteor. <br/><br/><b>Meteor, DDP, HTML, Javascript, SCSS, Less, Node, npm, MomentJS, ReactJS, Material-UI, MongoDB, Cordova, Push Notifications</b></div>

- name: Swaddling Clothes App
#  i18n: google
  url: http://swaddlingclothes.org/
  img: /static/assets/img/landing/sclogosmall.png
  desc: <div class="textplanation">Swaddling Clothes, a charity program run in various congregations of the Lutheran Church-Missouri Synod to help their neighbors with the gifts of clothing, food, and friendship, expressed a need for an internal database to track and centrally report inventory and clientele. I worked on a team of two to develop a webapp to meet - and exceed - their requirements. I was able to learn about deployment configurations for Java webapps, particularly for Heroku, during this process. I was also exposed to the challenge of configuring Grails to use PostgreSQL to meet Heroku standards. <br/><br/><b>Grails, Java, Groovy, HTML, Javascript, jQuery, CSS, GORM, Hibernate, Heroku, PostgreSQL, Bootstrap</b></div>

